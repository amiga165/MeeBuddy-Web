import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { AlertService } from "../../_services/alert.service";
import { Router } from '@angular/router';
import { DataService } from "../../_services/data.service";
import { UserService } from "../../_services/user.service"; 

@Component({
  selector: 'app-paymethod',
  templateUrl: './paymethod.component.html',
  styleUrls: ['./paymethod.component.scss']
})

export class PaymethodComponent implements OnInit {

  @Output()
  value = new EventEmitter();

  @Input()
  stage: number ;

  @Input()
  address: any ;

  cost: number ;

  accepted_payments = new Set(["wallet", "cod", "razorpay"]);

  deliveryTimings: Array<any> = [];

  deliveryTime: any ;

  order: any;

  wallet: any = 0;


  constructor( private toastr: AlertService, private router: Router, private user: UserService ,public dataService: DataService) { 

		this.createTimings();
//		this.order = { address_id: "", preferred_payment: "", chosen_delivery_time: ""}
	}

  ngOnInit(): void {
//	if (this.address) { this.order.address_id = this.address; console.log(this.order); };
	this.cost = this.dataService.cart.total + this.dataService.cart.delivery.delivery_cost;
	this.wallet = this.dataService.userData.info.wallet;
	console.log(this.cost,this.wallet); 
  }



	createTimings() {
		var cur, fin, time;
		console.log(this.dataService.center);
		cur = new Date();
		if (this.dataService.center.within_hour) {
			this.deliveryTimings.push({ timing: "Within hour", timestamp: 0 });
			cur.setHours(cur.getHours() + 2);
		} else {
			cur.setHours(cur.getHours() + (this.dataService.center.minimum_time || 2) - 1);
		}
		fin = new Date();
		fin.setHours(22);
		fin.setDate(fin.getDate() + 1);
		for (; cur.getTime() < fin.getTime(); ) {
			time = this.getFormatTime(cur);
			cur.setHours(cur.getHours() + 1);
			if (cur.getHours() > 22 || cur.getHours() < 8) continue;
			this.deliveryTimings.push(time);
		}
	}

	getFormatTime(time: Date) {
		var hours, ampm;
		hours = (time.getHours() % 12 === 0 ? 12 : time.getHours() % 12).toString();
		hours = hours.length === 1 ? " " + hours : hours;
		ampm = time.getHours() >= 12 ? "PM" : "AM";
		return {
			timing: `${hours} ${ampm} - (${time.getDate()}/${time.getMonth() + 1})`,
			timestamp: time.getTime(),
		};
	}

 getMethod() {

	if (this.dataService.userData.useWallet && this.wallet > this.cost ) { return "wallet"; }

	else {
		let method = (<HTMLInputElement>document.querySelector('input[name="method"]:checked')).value;
		if (method) { return method; }
		return false;
	}
  }

  Order() { 
	var method = this.getMethod();
	if ( method && this.deliveryTime && this.dataService.cart.total && this.address ) {
			this.order = {

				address_id: this.address,
				preferred_payment: method,
				chosen_delivery_time: this.deliveryTime,
				wallet: this.dataService.userData.useWallet

				};
			console.log(this.order);
			this.user.placeOrder(this.order).then(x => {
				if(x && ( method === "cod" || method === "wallet" ) ) {
					
					this.user.clearCartItems();
					this.router.navigate(["/home"]);
					this.toastr.success("Your Order has been placed");
				
				}
			});
		}
	else {
		this.toastr.error("Missing some fields");
		}
  } 
 
	payWithRazorpay(order) {
		var total = Math.ceil(order.amount * 1.03) * 100; // by including 3 % tax
		var options = {
			name: "MeeBuddy Shopping",
			payment_capture: 1,
			description: "Payment for Meebuddy Center Shopping Order.",
			image: "https://meebuddy.com/images/min_logo_meebuddy.jpg",
			order_id: order.rzp_order_id,
			currency: "INR",
			key: "rzp_live_DJA2rvcCmZFLh3",
			amount: total,
			prefill: {
				name: this.user.userData.info.name,
				email: this.user.userData.info.email || "sample@meebuddy.com",
			},
			notes: {
				payment_for: "Thanks for using Meebuddy",
			},
			theme: {
				color: "#3399cc",
			},
		};
		var successCallback = success => {
			var payment_data = {
				order_id: order.order_id,
				razorpay_payment_id: success.razorpay_payment_id,
				razorpay_order_id: success.razorpay_order_id,
				razorpay_signature: success.razorpay_signature,
			};
			this.paymentVerify(payment_data);
		};
		var cancelCallback = error => {
			this.deleteOrder(order.order_id);
		};

		RazorpayCheckout.on("payment.success", successCallback);
		RazorpayCheckout.on("payment.cancel", cancelCallback);
		RazorpayCheckout.open(options);
	}

  back() { this.value.emit(this.stage-1); }


}
